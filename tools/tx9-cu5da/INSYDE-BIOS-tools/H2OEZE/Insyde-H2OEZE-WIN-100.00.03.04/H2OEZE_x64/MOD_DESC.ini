**BIOS Module Description**

Module Name <AzaliaInitPei>:
{
  Azalia controller initialize in PEI phase.
}

Module Name <CapsulePei>:
{
  Capsule update module supports EFI and UEFI.

   Caution: This module requires additional review when modified.
   This driver will have external input - capsule image.
   This external input must be validated carefully to avoid security issue like
   buffer overflow, integer overflow.
}

Module Name <CpuIoPei>:
{
  Produces the CPU I/O PPI.

  This PEIM produces of the CPU I/O PPI.
}

Module Name <DevicePathDxe>:
{
  Device path driver that produces three UEFI device path protocols.

  This driver produces Device Path Utilities protocol and optionally
  DevicePahtToText and DevicePathFromText protocols based on feature flags
  PcdDevicePathSupportDevicePathToText & PcdDevicePathSupportDevicePathFromText
  respectively.
}

Module Name <DxeCore>:
{
  This is core module in DXE phase. It provides an implementation of DXE Core that is
  compliant with DXE CIS.
}

Module Name <DxeIpl>:
{
  Last PEIM executed in PEI phase to load DXE Core from a Firmware Volume.

  This module produces a special PPI named the DXE Initial Program Load (IPL)
  PPI to discover and dispatch the DXE Foundation and components that are
  needed to run the DXE Foundation.
}

Module Name <EbcDxe>:
{
  Module that produces EBC Interprete and EBC Debug Support protocols.

  This module implements EFI Byte Code (EBC) Virtual Machine that can provide
  platform and processor-independent mechanisms for loading and executing EFI
  device drivers.
}

Module Name <EmuSecPei>:
{
  This is the first module taking control of the platform upon power-on/reset.
}

Module Name <FirmwarePerformanceDxe>:
{
  This module installs ACPI Firmware Performance Data Table (FPDT).

  This module registers report status code listener to collect performance data
  for Firmware Basic Boot Performance Record and other boot performance records,
  and install FPDT to ACPI table.
}

Module Name <FirmwarePerformancePei>:
{
  This module updates S3 Resume Performance Record in ACPI Firmware Performance
  Data Table in S3 resume boot mode. In normal boot mode, this module consumes
  SecPerformance PPI produced by SEC phase and build Hob to convey the SEC
  performance data to DXE phase.

  This module register report status code listener to collect performance data
  for S3 Resume Performance Record on S3 resume boot path.
}

Module Name <FirmwarePerformanceSmm>:
{
  This module collects performance data for SMM driver boot records and S3 Suspend Performance Record.

  This module registers report status code listener to collect performance data
  for SMM boot performance records and S3 Suspend Performance Record.
}

Module Name <Metronome>:
{
  This module produces the Metronome Architectural Protocol on top of Timer Library.

  This is a generic implementation of the Metronome Architectural Protocol that
  layers on top of an instance of the Timer Library.  The Timer Library provides
  functions for nanosecond and microsecond delays.  This generic implementation
  produces a fixed TickPeriod of 100ns unit, and when the WaitForTick() service
  is called, the number of ticks passed in is converted to either nanosecond or
  microsecond units.  If the number of ticks is small, then nanoseconds are used.
  If the number of ticks is large, then microseconds are used.  This prevents
  overflows that could occur for long delays if only nanoseconds were used and also
  provides the greatest accuracy for small delays.
}

Module Name <PcatSingleSegmentPciCfg2Pei>:
{
  This driver installs Single Segment Pci Configuration 2 PPI 
  to provide read, write and modify access to Pci configuration space in PEI phase.
  To follow PI specification, these services also support access to the unaligned Pci address.
}

Module Name <PcdPeim>:
{
  PCD PEIM produces PCD database to manage all dynamic PCD in PEI phase and install Pcd Ppi service.

  This version PCD PEIM depends on the external PCD database binary file, not built in PCD data base.
  There are two PCD PPIs as follows:
    1) PCD_PPI
        It is EDKII implementation which support Dynamic/DynamicEx Pcds.
    2) EFI_PEI_PCD_PPI
        It is defined by PI specification 1.2, Vol 3 which only support dynamicEx
        type Pcd.
  For dynamicEx type PCD, it is compatible between PCD_PPI and EFI_PEI_PCD_PPI.
  PCD PEIM driver will produce above two PPIs at same time.

  PCD database is generated as the separate binary image at build time. The binary image
  will be intergrated into Firmware volume together with PCD driver.
}

Module Name <PciCfgOnPciCfg2Thunk>:
{
  Module produce PciCfgPpi on top of PciCfgPpi2.

  PIWG's PI specification replaces Inte's EFI Specification 1.10.
  EFI_PEI_PCI_CFG_PPI defined in Inte's EFI Specification 1.10 is replaced by
  EFI_PEI_PCI_CFG2_PPI in PI 1.0.
  This module produces PciCfgPpi on top of PciCfgPpi2. This module is used on platform when both of
  these two conditions are true:
  1) Framework module is present that consumes PCI CFG  AND
  2) EDKII module is present that produces PCI CFG2 but not PCI CFG
}

Module Name <PeiCore>:
{
  PeiMain module is core module in PEI phase. It takes responsibilities of:
   1) Initialize memory, PPI, image services etc, to establish PEIM runtime environment.
   2) Dispatch PEIM from discovered FV.
   3) Handoff control to DxeIpl to load DXE core and enter DXE phase.
}

Module Name <PeiVariable>:
{
  Implement ReadOnly Variable Services required by PEIM and install
  PEI ReadOnly Varaiable2 PPI. These services operates the non-volatile storage space.
}

Module Name <PiSmmCore>:
{
  This module provide an SMM CIS compliant implementation of SMM Core.
}

Module Name <PiSmmIpl>:
{
  This module provide an SMM CIS compliant implementation of SMM IPL.
}

Module Name <PolicyClass1Pei>:
{
  Azalia controller initialize in PEI phase.
}

Module Name <ReadOnlyVariableOnReadOnlyVariable2Thunk>:
{
  Module produce EFI_PEI_READ_ONLY_VARIABLE_PPI on top of EFI_PEI_READ_ONLY_VARIABLE2_PPI.

  UEFI PI Spec supersedes Intel's Framework Specs.
  EFI_PEI_READ_ONLY_VARIABLE_PPI defined in Intel Framework Pkg is replaced by 
  EFI_PEI_READ_ONLY_VARIABLE2_PPI in MdePkg.
  This module produces EFI_PEI_READ_ONLY_VARIABLE_PPI on top of EFI_PEI_READ_ONLY_VARIABLE2_PPI.
  This module is used on platform when both of these two conditions are true:
  1) Framework module consumes EFI_PEI_READ_ONLY_VARIABLE_PPI is present.
  2) The platform has a PI module that only produces EFI_PEI_READ_ONLY_VARIABLE2_PPI.
  This module can't be used together with ReadOnlyVariable2OnReadOnlyVariableThunk module.
}

Module Name <ReportStatusCodeRouterPei>:
{
  Report Status Code Router PEIM which produces Report Stataus Code Handler PPI and Status Code PPI.
}

Module Name <ReportStatusCodeRouterRuntimeDxe>:
{
  Report Status Code Router Driver which produces Report Stataus Code Handler Protocol
  and Status Code Runtime Protocol.
}

Module Name <RuntimeDxe>:
{
  Module that produces EFI runtime virtual switch over services.

  This runtime module installs Runtime Architectural Protocol and registers
  CalculateCrc32 boot services table, SetVirtualAddressMap & ConvertPointer
  runtime services table.
}

Module Name <SetupDataProviderPei>:
{
  This PEIM provides Setup variable default values if Setup variable does not exist
}

Module Name <SmmLockBox>:
{
  Caution: This module requires additional review when modified.
  This driver will have external input - communicate buffer in SMM mode.
  This external input must be validated carefully to avoid security issue like
  buffer overflow, integer overflow.
}

Module Name <StatusCodeHandlerSmm>:
{
  Status Code Handler Driver which produces general handlers and hook them
  onto the SMM status code router.
}

Module Name <TcgPei>:
{
  This module will initialize TPM device and measure FVs in PEI phase.
}

Module Name <WatchdogTimer>:
{
  Generic watchdog timer driver produceing Watchdog Timer Architectural Protocol using UEFI APIs.
}

